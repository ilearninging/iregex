{"id":"179410","urlID":"3bv9m","name":"dakata","description":"","content":"namespace Problem1\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n\n    class Program\n    {\n        static void Main()\n        {\n            string input = Console.ReadLine();\n\n            var numbers = input.Split().ToList();\n\n            string command = Console.ReadLine();\n\n            while (command != \"end\")\n            {\n                string[] commandArgs = command.Split();\n\n                switch (commandArgs[0])\n                {\n                    case \"exchange\":\n                        Exchange(numbers, commandArgs);\n                        break;\n                    case \"max\":\n                        Max(numbers, commandArgs);\n                        break;\n                    case \"min\":\n                        Min(numbers, commandArgs);\n                        break;\n                    case \"first\":\n                        First(numbers, commandArgs);\n                        break;\n                    case \"last\":\n                        Last(numbers, commandArgs);\n                        break;\n                }\n\n                command = Console.ReadLine();\n            }\n\n            Console.WriteLine(\"[{0}]\", string.Join(\", \", numbers));\n        }\n\n        private static void Last(List<string> numbers, string[] commandArgs)\n        {\n            int count = int.Parse(commandArgs[1]);\n            string oddOrEven = commandArgs[2];\n\n            if (count > numbers.Count)\n            {\n                Console.WriteLine(\"Invalid count\");\n            }\n            else if (oddOrEven == \"odd\")\n            {\n                var newNumbers = numbers.Where((c, i) => int.Parse(c)%2 != 0)\n                    .Skip(numbers.Where((c, i) => int.Parse(c)%2 != 0).Count() - count)\n                    .Take(count);\n                Console.WriteLine(\"[{0}]\", string.Join(\", \", newNumbers));\n            }\n            else if (oddOrEven == \"even\")\n            {\n                var newNumbers = numbers.Where((c, i) => int.Parse(c) % 2 == 0)\n                    .Skip(numbers.Where((c, i) => int.Parse(c) % 2 == 0).Count() - count)\n                    .Take(count);\n                Console.WriteLine(\"[{0}]\", string.Join(\", \", newNumbers));\n            }\n        }\n\n        private static void First(List<string> numbers, string[] commandArgs)\n        {\n            int count = int.Parse(commandArgs[1]);\n            string oddOrEven = commandArgs[2];\n\n            if (count > numbers.Count)\n            {\n                Console.WriteLine(\"Invalid count\");\n                return;\n            }\n            if (oddOrEven == \"odd\")\n            {\n                var newNumbers = numbers.Where((c, i) => int.Parse(c) % 2 != 0).Take(count);\n                Console.WriteLine(\"[{0}]\", string.Join(\", \", newNumbers));\n            }\n            else\n            {\n                var newNumbers = numbers.Where((c, i) => int.Parse(c) % 2 == 0).Take(count);\n                Console.WriteLine(\"[{0}]\", string.Join(\", \", newNumbers));\n            }\n        }\n\n        private static void Min(List<string> numbers, string[] commandArgs)\n        {\n            var oddOrEven = commandArgs[1];\n\n            if (oddOrEven == \"odd\")\n            {\n                var number = numbers.Where((c, i) => c != null && int.Parse(c) % 2 != 0).Min();\n                if (number != null)\n                {\n                    var result = Enumerable.Range(0, numbers.Count)\n                         .Where(i => numbers[i] == number)\n                         .ToList();\n                    Console.WriteLine(result[result.Count - 1]);\n                }\n                else\n                {\n                    Console.WriteLine(\"No matches\");\n                }\n            }\n            else\n            {\n                var number = numbers.Where((c, i) => c != null && int.Parse(c) % 2 == 0).Min();\n                if (number != null)\n                {\n                    var result = Enumerable.Range(0, numbers.Count)\n                         .Where(i => numbers[i] == number)\n                         .ToList();\n                    Console.WriteLine(result[result.Count - 1]);\n                }\n                else\n                {\n                    Console.WriteLine(\"No matches\");\n                }\n            }\n        }\n\n        private static void Max(List<string> numbers, string[] commandArgs)\n        {\n            var oddOrEven = commandArgs[1];\n\n            if (oddOrEven == \"odd\")\n            {\n                var number = numbers.Where((c, i) => c != null && int.Parse(c) % 2 != 0).Max();\n                if (number != null)\n                {\n                    var result = Enumerable.Range(0, numbers.Count)\n                         .Where(i => numbers[i] == number)\n                         .ToList();\n                    Console.WriteLine(result[result.Count - 1]);\n                }\n                else\n                {\n                    Console.WriteLine(\"No matches\");\n                }\n            }\n            else\n            {\n                var number = numbers.Where((c, i) => c != null && int.Parse(c) % 2 == 0).Max();\n                if (number != null)\n                {\n                    var result = Enumerable.Range(0, numbers.Count)\n                         .Where(i => numbers[i] == number)\n                         .ToList();\n                    Console.WriteLine(result[result.Count - 1]);\n                }\n                else\n                {\n                    Console.WriteLine(\"No matches\");\n                }\n            }\n        }\n\n        private static void Exchange(List<string> numbers, string[] commandArgs)\n        {\n            int index = int.Parse(commandArgs[1]);\n            string[] output = new string[numbers.Count];\n\n            if (index < 0 || index >= numbers.Count)\n            {\n                Console.WriteLine(\"Invalid index\");\n            }\n            else\n            {\n                for (int i = 0; i < index + 1; i++)\n                {\n                    string firstElement = numbers.First();\n                    numbers.RemoveAt(0);\n                    numbers.Add(firstElement);\n                }\n            }\n        }\n    }\n}\n","weightedVote":"2.5","numVotes":"0","author":"","community":"1","dateAdded":"2015-10-11","pattern":"\/dakata\/g","replace":"","state":"{\"substEnabled\":false}"}