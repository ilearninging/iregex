{"id":"177489","urlID":"3bplj","name":"EMail","description":"","content":"\n\n\n\n\n\nNetwork Working Group                                    P. Resnick, Ed.\nRequest for Comments: 5322                         Qualcomm Incorporated\nObsoletes: 2822                                             October 2008\nUpdates: 4021\nCategory: Standards Track\n\n\n                        Internet Message Format\n\nStatus of This Memo\n\n   This document specifies an Internet standards track protocol for the\n   Internet community, and requests discussion and suggestions for\n   improvements.  Please refer to the current edition of the \"Internet\n   Official Protocol Standards\" (STD 1) for the standardization state\n   and status of this protocol.  Distribution of this memo is unlimited.\n\nAbstract\n\n   This document specifies the Internet Message Format (IMF), a syntax\n   for text messages that are sent between computer users, within the\n   framework of \"electronic mail\" messages.  This specification is a\n   revision of Request For Comments (RFC) 2822, which itself superseded\n   Request For Comments (RFC) 822, \"Standard for the Format of ARPA\n   Internet Text Messages\", updating it to reflect current practice and\n   incorporating incremental changes that were specified in other RFCs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResnick                     Standards Track                     [Page 1]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\nTable of Contents\n\n   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4\n     1.1.  Scope  . . . . . . . . . . . . . . . . . . . . . . . . . .  4\n     1.2.  Notational Conventions . . . . . . . . . . . . . . . . . .  5\n       1.2.1.  Requirements Notation  . . . . . . . . . . . . . . . .  5\n       1.2.2.  Syntactic Notation . . . . . . . . . . . . . . . . . .  5\n       1.2.3.  Structure of This Document . . . . . . . . . . . . . .  5\n   2.  Lexical Analysis of Messages . . . . . . . . . . . . . . . . .  6\n     2.1.  General Description  . . . . . . . . . . . . . . . . . . .  6\n       2.1.1.  Line Length Limits . . . . . . . . . . . . . . . . . .  7\n     2.2.  Header Fields  . . . . . . . . . . . . . . . . . . . . . .  8\n       2.2.1.  Unstructured Header Field Bodies . . . . . . . . . . .  8\n       2.2.2.  Structured Header Field Bodies . . . . . . . . . . . .  8\n       2.2.3.  Long Header Fields . . . . . . . . . . . . . . . . . .  8\n     2.3.  Body . . . . . . . . . . . . . . . . . . . . . . . . . . .  9\n   3.  Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n     3.1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . 10\n     3.2.  Lexical Tokens . . . . . . . . . . . . . . . . . . . . . . 10\n       3.2.1.  Quoted characters  . . . . . . . . . . . . . . . . . . 10\n       3.2.2.  Folding White Space and Comments . . . . . . . . . . . 11\n       3.2.3.  Atom . . . . . . . . . . . . . . . . . . . . . . . . . 12\n       3.2.4.  Quoted Strings . . . . . . . . . . . . . . . . . . . . 13\n       3.2.5.  Miscellaneous Tokens . . . . . . . . . . . . . . . . . 14\n     3.3.  Date and Time Specification  . . . . . . . . . . . . . . . 14\n     3.4.  Address Specification  . . . . . . . . . . . . . . . . . . 16\n       3.4.1.  Addr-Spec Specification  . . . . . . . . . . . . . . . 17\n     3.5.  Overall Message Syntax . . . . . . . . . . . . . . . . . . 18\n     3.6.  Field Definitions  . . . . . . . . . . . . . . . . . . . . 19\n       3.6.1.  The Origination Date Field . . . . . . . . . . . . . . 22\n       3.6.2.  Originator Fields  . . . . . . . . . . . . . . . . . . 22\n       3.6.3.  Destination Address Fields . . . . . . . . . . . . . . 23\n       3.6.4.  Identification Fields  . . . . . . . . . . . . . . . . 25\n       3.6.5.  Informational Fields . . . . . . . . . . . . . . . . . 27\n       3.6.6.  Resent Fields  . . . . . . . . . . . . . . . . . . . . 28\n       3.6.7.  Trace Fields . . . . . . . . . . . . . . . . . . . . . 30\n       3.6.8.  Optional Fields  . . . . . . . . . . . . . . . . . . . 30\n   4.  Obsolete Syntax  . . . . . . . . . . . . . . . . . . . . . . . 31\n     4.1.  Miscellaneous Obsolete Tokens  . . . . . . . . . . . . . . 32\n     4.2.  Obsolete Folding White Space . . . . . . . . . . . . . . . 33\n     4.3.  Obsolete Date and Time . . . . . . . . . . . . . . . . . . 33\n     4.4.  Obsolete Addressing  . . . . . . . . . . . . . . . . . . . 35\n     4.5.  Obsolete Header Fields . . . . . . . . . . . . . . . . . . 35\n       4.5.1.  Obsolete Origination Date Field  . . . . . . . . . . . 36\n       4.5.2.  Obsolete Originator Fields . . . . . . . . . . . . . . 36\n       4.5.3.  Obsolete Destination Address Fields  . . . . . . . . . 37\n       4.5.4.  Obsolete Identification Fields . . . . . . . . . . . . 37\n       4.5.5.  Obsolete Informational Fields  . . . . . . . . . . . . 37\n\n\n\nResnick                     Standards Track                     [Page 2]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n       4.5.6.  Obsolete Resent Fields . . . . . . . . . . . . . . . . 38\n       4.5.7.  Obsolete Trace Fields  . . . . . . . . . . . . . . . . 38\n       4.5.8.  Obsolete optional fields . . . . . . . . . . . . . . . 38\n   5.  Security Considerations  . . . . . . . . . . . . . . . . . . . 38\n   6.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 39\n   Appendix A.     Example Messages . . . . . . . . . . . . . . . . . 43\n   Appendix A.1.   Addressing Examples  . . . . . . . . . . . . . . . 44\n   Appendix A.1.1. A Message from One Person to Another with\n                   Simple Addressing  . . . . . . . . . . . . . . . . 44\n   Appendix A.1.2. Different Types of Mailboxes . . . . . . . . . . . 45\n   Appendix A.1.3. Group Addresses  . . . . . . . . . . . . . . . . . 45\n   Appendix A.2.   Reply Messages . . . . . . . . . . . . . . . . . . 46\n   Appendix A.3.   Resent Messages  . . . . . . . . . . . . . . . . . 47\n   Appendix A.4.   Messages with Trace Fields . . . . . . . . . . . . 48\n   Appendix A.5.   White Space, Comments, and Other Oddities  . . . . 49\n   Appendix A.6.   Obsoleted Forms  . . . . . . . . . . . . . . . . . 50\n   Appendix A.6.1. Obsolete Addressing  . . . . . . . . . . . . . . . 50\n   Appendix A.6.2. Obsolete Dates . . . . . . . . . . . . . . . . . . 50\n   Appendix A.6.3. Obsolete White Space and Comments  . . . . . . . . 51\n   Appendix B.     Differences from Earlier Specifications  . . . . . 52\n   Appendix C.     Acknowledgements . . . . . . . . . . . . . . . . . 53\n   7.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 55\n     7.1.  Normative References . . . . . . . . . . . . . . . . . . . 55\n     7.2.  Informative References . . . . . . . . . . . . . . . . . . 55\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResnick                     Standards Track                     [Page 3]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n1.  Introduction\n\n1.1.  Scope\n\n   This document specifies the Internet Message Format (IMF), a syntax\n   for text messages that are sent between computer users, within the\n   framework of \"electronic mail\" messages.  This specification is an\n   update to [RFC2822], which itself superseded [RFC0822], updating it\n   to reflect current practice and incorporating incremental changes\n   that were specified in other RFCs such as [RFC1123].\n\n   This document specifies a syntax only for text messages.  In\n   particular, it makes no provision for the transmission of images,\n   audio, or other sorts of structured data in electronic mail messages.\n   There are several extensions published, such as the MIME document\n   series ([RFC2045], [RFC2046], [RFC2049]), which describe mechanisms\n   for the transmission of such data through electronic mail, either by\n   extending the syntax provided here or by structuring such messages to\n   conform to this syntax.  Those mechanisms are outside of the scope of\n   this specification.\n\n   In the context of electronic mail, messages are viewed as having an\n   envelope and contents.  The envelope contains whatever information is\n   needed to accomplish transmission and delivery.  (See [RFC5321] for a\n   discussion of the envelope.)  The contents comprise the object to be\n   delivered to the recipient.  This specification applies only to the\n   format and some of the semantics of message contents.  It contains no\n   specification of the information in the envelope.\n\n   However, some message systems may use information from the contents\n   to create the envelope.  It is intended that this specification\n   facilitate the acquisition of such information by programs.\n\n   This specification is intended as a definition of what message\n   content format is to be passed between systems.  Though some message\n   systems locally store messages in this format (which eliminates the\n   need for translation between formats) and others use formats that\n   differ from the one specified in this specification, local storage is\n   outside of the scope of this specification.\n\n      Note: This specification is not intended to dictate the internal\n      formats used by sites, the specific message system features that\n      they are expected to support, or any of the characteristics of\n      user interface programs that create or read messages.  In\n      addition, this document does not specify an encoding of the\n      characters for either transport or storage; that is, it does not\n      specify the number of bits used or how those bits are specifically\n      transferred over the wire or stored on disk.\n\n\n\nResnick                     Standards Track                     [Page 4]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n1.2.  Notational Conventions\n\n1.2.1.  Requirements Notation\n\n   This document occasionally uses terms that appear in capital letters.\n   When the terms \"MUST\", \"SHOULD\", \"RECOMMENDED\", \"MUST NOT\", \"SHOULD\n   NOT\", and \"MAY\" appear capitalized, they are being used to indicate\n   particular requirements of this specification.  A discussion of the\n   meanings of these terms appears in [RFC2119].\n\n1.2.2.  Syntactic Notation\n\n   This specification uses the Augmented Backus-Naur Form (ABNF)\n   [RFC5234] notation for the formal definitions of the syntax of\n   messages.  Characters will be specified either by a decimal value\n   (e.g., the value %d65 for uppercase A and %d97 for lowercase A) or by\n   a case-insensitive literal value enclosed in quotation marks (e.g.,\n   \"A\" for either uppercase or lowercase A).\n\n1.2.3.  Structure of This Document\n\n   This document is divided into several sections.\n\n   This section, section 1, is a short introduction to the document.\n\n   Section 2 lays out the general description of a message and its\n   constituent parts.  This is an overview to help the reader understand\n   some of the general principles used in the later portions of this\n   document.  Any examples in this section MUST NOT be taken as\n   specification of the formal syntax of any part of a message.\n\n   Section 3 specifies formal ABNF rules for the structure of each part\n   of a message (the syntax) and describes the relationship between\n   those parts and their meaning in the context of a message (the\n   semantics).  That is, it lays out the actual rules for the structure\n   of each part of a message (the syntax) as well as a description of\n   the parts and instructions for their interpretation (the semantics).\n   This includes analysis of the syntax and semantics of subparts of\n   messages that have specific structure.  The syntax included in\n   section 3 represents messages as they MUST be created.  There are\n   also notes in section 3 to indicate if any of the options specified\n   in the syntax SHOULD be used over any of the others.\n\n   Both sections 2 and 3 describe messages that are legal to generate\n   for purposes of this specification.\n\n\n\n\n\n\nResnick                     Standards Track                     [Page 5]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   Section 4 of this document specifies an \"obsolete\" syntax.  There are\n   references in section 3 to these obsolete syntactic elements.  The\n   rules of the obsolete syntax are elements that have appeared in\n   earlier versions of this specification or have previously been widely\n   used in Internet messages.  As such, these elements MUST be\n   interpreted by parsers of messages in order to be conformant to this\n   specification.  However, since items in this syntax have been\n   determined to be non-interoperable or to cause significant problems\n   for recipients of messages, they MUST NOT be generated by creators of\n   conformant messages.\n\n   Section 5 details security considerations to take into account when\n   implementing this specification.\n\n   Appendix A lists examples of different sorts of messages.  These\n   examples are not exhaustive of the types of messages that appear on\n   the Internet, but give a broad overview of certain syntactic forms.\n\n   Appendix B lists the differences between this specification and\n   earlier specifications for Internet messages.\n\n   Appendix C contains acknowledgements.\n\n2.  Lexical Analysis of Messages\n\n2.1.  General Description\n\n   At the most basic level, a message is a series of characters.  A\n   message that is conformant with this specification is composed of\n   characters with values in the range of 1 through 127 and interpreted\n   as US-ASCII [ANSI.X3-4.1986] characters.  For brevity, this document\n   sometimes refers to this range of characters as simply \"US-ASCII\n   characters\".\n\n      Note: This document specifies that messages are made up of\n      characters in the US-ASCII range of 1 through 127.  There are\n      other documents, specifically the MIME document series ([RFC2045],\n      [RFC2046], [RFC2047], [RFC2049], [RFC4288], [RFC4289]), that\n      extend this specification to allow for values outside of that\n      range.  Discussion of those mechanisms is not within the scope of\n      this specification.\n\n   Messages are divided into lines of characters.  A line is a series of\n   characters that is delimited with the two characters carriage-return\n   and line-feed; that is, the carriage return (CR) character (ASCII\n   value 13) followed immediately by the line feed (LF) character (ASCII\n   value 10).  (The carriage return\/line feed pair is usually written in\n   this document as \"CRLF\".)\n\n\n\nResnick                     Standards Track                     [Page 6]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   A message consists of header fields (collectively called \"the header\n   section of the message\") followed, optionally, by a body.  The header\n   section is a sequence of lines of characters with special syntax as\n   defined in this specification.  The body is simply a sequence of\n   characters that follows the header section and is separated from the\n   header section by an empty line (i.e., a line with nothing preceding\n   the CRLF).\n\n      Note: Common parlance and earlier versions of this specification\n      use the term \"header\" to either refer to the entire header section\n      or to refer to an individual header field.  To avoid ambiguity,\n      this document does not use the terms \"header\" or \"headers\" in\n      isolation, but instead always uses \"header field\" to refer to the\n      individual field and \"header section\" to refer to the entire\n      collection.\n\n2.1.1.  Line Length Limits\n\n   There are two limits that this specification places on the number of\n   characters in a line.  Each line of characters MUST be no more than\n   998 characters, and SHOULD be no more than 78 characters, excluding\n   the CRLF.\n\n   The 998 character limit is due to limitations in many implementations\n   that send, receive, or store IMF messages which simply cannot handle\n   more than 998 characters on a line.  Receiving implementations would\n   do well to handle an arbitrarily large number of characters in a line\n   for robustness sake.  However, there are so many implementations that\n   (in compliance with the transport requirements of [RFC5321]) do not\n   accept messages containing more than 1000 characters including the CR\n   and LF per line, it is important for implementations not to create\n   such messages.\n\n   The more conservative 78 character recommendation is to accommodate\n   the many implementations of user interfaces that display these\n   messages which may truncate, or disastrously wrap, the display of\n   more than 78 characters per line, in spite of the fact that such\n   implementations are non-conformant to the intent of this\n   specification (and that of [RFC5321] if they actually cause\n   information to be lost).  Again, even though this limitation is put\n   on messages, it is incumbent upon implementations that display\n   messages to handle an arbitrarily large number of characters in a\n   line (certainly at least up to the 998 character limit) for the sake\n   of robustness.\n\n\n\n\n\n\n\nResnick                     Standards Track                     [Page 7]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n2.2.  Header Fields\n\n   Header fields are lines beginning with a field name, followed by a\n   colon (\":\"), followed by a field body, and terminated by CRLF.  A\n   field name MUST be composed of printable US-ASCII characters (i.e.,\n   characters that have values between 33 and 126, inclusive), except\n   colon.  A field body may be composed of printable US-ASCII characters\n   as well as the space (SP, ASCII value 32) and horizontal tab (HTAB,\n   ASCII value 9) characters (together known as the white space\n   characters, WSP).  A field body MUST NOT include CR and LF except\n   when used in \"folding\" and \"unfolding\", as described in section\n   2.2.3.  All field bodies MUST conform to the syntax described in\n   sections 3 and 4 of this specification.\n\n2.2.1.  Unstructured Header Field Bodies\n\n   Some field bodies in this specification are defined simply as\n   \"unstructured\" (which is specified in section 3.2.5 as any printable\n   US-ASCII characters plus white space characters) with no further\n   restrictions.  These are referred to as unstructured field bodies.\n   Semantically, unstructured field bodies are simply to be treated as a\n   single line of characters with no further processing (except for\n   \"folding\" and \"unfolding\" as described in section 2.2.3).\n\n2.2.2.  Structured Header Field Bodies\n\n   Some field bodies in this specification have a syntax that is more\n   restrictive than the unstructured field bodies described above.\n   These are referred to as \"structured\" field bodies.  Structured field\n   bodies are sequences of specific lexical tokens as described in\n   sections 3 and 4 of this specification.  Many of these tokens are\n   allowed (according to their syntax) to be introduced or end with\n   comments (as described in section 3.2.2) as well as the white space\n   characters, and those white space characters are subject to \"folding\"\n   and \"unfolding\" as described in section 2.2.3.  Semantic analysis of\n   structured field bodies is given along with their syntax.\n\n2.2.3.  Long Header Fields\n\n   Each header field is logically a single line of characters comprising\n   the field name, the colon, and the field body.  For convenience\n   however, and to deal with the 998\/78 character limitations per line,\n   the field body portion of a header field can be split into a\n   multiple-line representation; this is called \"folding\".  The general\n   rule is that wherever this specification allows for folding white\n   space (not simply WSP characters), a CRLF may be inserted before any\n   WSP.\n\n\n\n\nResnick                     Standards Track                     [Page 8]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   For example, the header field:\n\n   Subject: This is a test\n\n   can be represented as:\n\n   Subject: This\n    is a test\n\n      Note: Though structured field bodies are defined in such a way\n      that folding can take place between many of the lexical tokens\n      (and even within some of the lexical tokens), folding SHOULD be\n      limited to placing the CRLF at higher-level syntactic breaks.  For\n      instance, if a field body is defined as comma-separated values, it\n      is recommended that folding occur after the comma separating the\n      structured items in preference to other places where the field\n      could be folded, even if it is allowed elsewhere.\n\n   The process of moving from this folded multiple-line representation\n   of a header field to its single line representation is called\n   \"unfolding\".  Unfolding is accomplished by simply removing any CRLF\n   that is immediately followed by WSP.  Each header field should be\n   treated in its unfolded form for further syntactic and semantic\n   evaluation.  An unfolded header field has no length restriction and\n   therefore may be indeterminately long.\n\n2.3.  Body\n\n   The body of a message is simply lines of US-ASCII characters.  The\n   only two limitations on the body are as follows:\n\n   o  CR and LF MUST only occur together as CRLF; they MUST NOT appear\n      independently in the body.\n   o  Lines of characters in the body MUST be limited to 998 characters,\n      and SHOULD be limited to 78 characters, excluding the CRLF.\n\n      Note: As was stated earlier, there are other documents,\n      specifically the MIME documents ([RFC2045], [RFC2046], [RFC2049],\n      [RFC4288], [RFC4289]), that extend (and limit) this specification\n      to allow for different sorts of message bodies.  Again, these\n      mechanisms are beyond the scope of this document.\n\n\n\n\n\n\n\n\n\n\nResnick                     Standards Track                     [Page 9]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n3.  Syntax\n\n3.1.  Introduction\n\n   The syntax as given in this section defines the legal syntax of\n   Internet messages.  Messages that are conformant to this\n   specification MUST conform to the syntax in this section.  If there\n   are options in this section where one option SHOULD be generated,\n   that is indicated either in the prose or in a comment next to the\n   syntax.\n\n   For the defined expressions, a short description of the syntax and\n   use is given, followed by the syntax in ABNF, followed by a semantic\n   analysis.  The following primitive tokens that are used but otherwise\n   unspecified are taken from the \"Core Rules\" of [RFC5234], Appendix\n   B.1: CR, LF, CRLF, HTAB, SP, WSP, DQUOTE, DIGIT, ALPHA, and VCHAR.\n\n   In some of the definitions, there will be non-terminals whose names\n   start with \"obs-\".  These \"obs-\" elements refer to tokens defined in\n   the obsolete syntax in section 4.  In all cases, these productions\n   are to be ignored for the purposes of generating legal Internet\n   messages and MUST NOT be used as part of such a message.  However,\n   when interpreting messages, these tokens MUST be honored as part of\n   the legal syntax.  In this sense, section 3 defines a grammar for the\n   generation of messages, with \"obs-\" elements that are to be ignored,\n   while section 4 adds grammar for the interpretation of messages.\n\n3.2.  Lexical Tokens\n\n   The following rules are used to define an underlying lexical\n   analyzer, which feeds tokens to the higher-level parsers.  This\n   section defines the tokens used in structured header field bodies.\n\n      Note: Readers of this specification need to pay special attention\n      to how these lexical tokens are used in both the lower-level and\n      higher-level syntax later in the document.  Particularly, the\n      white space tokens and the comment tokens defined in section 3.2.2\n      get used in the lower-level tokens defined here, and those lower-\n      level tokens are in turn used as parts of the higher-level tokens\n      defined later.  Therefore, white space and comments may be allowed\n      in the higher-level tokens even though they may not explicitly\n      appear in a particular definition.\n\n3.2.1.  Quoted characters\n\n   Some characters are reserved for special interpretation, such as\n   delimiting lexical tokens.  To permit use of these characters as\n   uninterpreted data, a quoting mechanism is provided.\n\n\n\nResnick                     Standards Track                    [Page 10]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   quoted-pair     =   (\"\\\" (VCHAR \/ WSP)) \/ obs-qp\n\n   Where any quoted-pair appears, it is to be interpreted as the\n   character alone.  That is to say, the \"\\\" character that appears as\n   part of a quoted-pair is semantically \"invisible\".\n\n      Note: The \"\\\" character may appear in a message where it is not\n      part of a quoted-pair.  A \"\\\" character that does not appear in a\n      quoted-pair is not semantically invisible.  The only places in\n      this specification where quoted-pair currently appears are\n      ccontent, qcontent, and in obs-dtext in section 4.\n\n3.2.2.  Folding White Space and Comments\n\n   White space characters, including white space used in folding\n   (described in section 2.2.3), may appear between many elements in\n   header field bodies.  Also, strings of characters that are treated as\n   comments may be included in structured field bodies as characters\n   enclosed in parentheses.  The following defines the folding white\n   space (FWS) and comment constructs.\n\n   Strings of characters enclosed in parentheses are considered comments\n   so long as they do not appear within a \"quoted-string\", as defined in\n   section 3.2.4.  Comments may nest.\n\n   There are several places in this specification where comments and FWS\n   may be freely inserted.  To accommodate that syntax, an additional\n   token for \"CFWS\" is defined for places where comments and\/or FWS can\n   occur.  However, where CFWS occurs in this specification, it MUST NOT\n   be inserted in such a way that any line of a folded header field is\n   made up entirely of WSP characters and nothing else.\n\n   FWS             =   ([*WSP CRLF] 1*WSP) \/  obs-FWS\n                                          ; Folding white space\n\n   ctext           =   %d33-39 \/          ; Printable US-ASCII\n                       %d42-91 \/          ;  characters not including\n                       %d93-126 \/         ;  \"(\", \")\", or \"\\\"\n                       obs-ctext\n\n   ccontent        =   ctext \/ quoted-pair \/ comment\n\n   comment         =   \"(\" *([FWS] ccontent) [FWS] \")\"\n\n   CFWS            =   (1*([FWS] comment) [FWS]) \/ FWS\n\n\n\n\n\n\nResnick                     Standards Track                    [Page 11]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   Throughout this specification, where FWS (the folding white space\n   token) appears, it indicates a place where folding, as discussed in\n   section 2.2.3, may take place.  Wherever folding appears in a message\n   (that is, a header field body containing a CRLF followed by any WSP),\n   unfolding (removal of the CRLF) is performed before any further\n   semantic analysis is performed on that header field according to this\n   specification.  That is to say, any CRLF that appears in FWS is\n   semantically \"invisible\".\n\n   A comment is normally used in a structured field body to provide some\n   human-readable informational text.  Since a comment is allowed to\n   contain FWS, folding is permitted within the comment.  Also note that\n   since quoted-pair is allowed in a comment, the parentheses and\n   backslash characters may appear in a comment, so long as they appear\n   as a quoted-pair.  Semantically, the enclosing parentheses are not\n   part of the comment; the comment is what is contained between the two\n   parentheses.  As stated earlier, the \"\\\" in any quoted-pair and the\n   CRLF in any FWS that appears within the comment are semantically\n   \"invisible\" and therefore not part of the comment either.\n\n   Runs of FWS, comment, or CFWS that occur between lexical tokens in a\n   structured header field are semantically interpreted as a single\n   space character.\n\n3.2.3.  Atom\n\n   Several productions in structured header field bodies are simply\n   strings of certain basic characters.  Such productions are called\n   atoms.\n\n   Some of the structured header field bodies also allow the period\n   character (\".\", ASCII value 46) within runs of atext.  An additional\n   \"dot-atom\" token is defined for those purposes.\n\n      Note: The \"specials\" token does not appear anywhere else in this\n      specification.  It is simply the visible (i.e., non-control, non-\n      white space) characters that do not appear in atext.  It is\n      provided only because it is useful for implementers who use tools\n      that lexically analyze messages.  Each of the characters in\n      specials can be used to indicate a tokenization point in lexical\n      analysis.\n\n\n\n\n\n\n\n\n\n\nResnick                     Standards Track                    [Page 12]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   atext           =   ALPHA \/ DIGIT \/    ; Printable US-ASCII\n                       \"!\" \/ \"#\" \/        ;  characters not including\n                       \"$\" \/ \"%\" \/        ;  specials.  Used for atoms.\n                       \"&\" \/ \"'\" \/\n                       \"*\" \/ \"+\" \/\n                       \"-\" \/ \"\/\" \/\n                       \"=\" \/ \"?\" \/\n                       \"^\" \/ \"_\" \/\n                       \"`\" \/ \"{\" \/\n                       \"|\" \/ \"}\" \/\n                       \"~\"\n\n   atom            =   [CFWS] 1*atext [CFWS]\n\n   dot-atom-text   =   1*atext *(\".\" 1*atext)\n\n   dot-atom        =   [CFWS] dot-atom-text [CFWS]\n\n   specials        =   \"(\" \/ \")\" \/        ; Special characters that do\n                       \"<\" \/ \">\" \/        ;  not appear in atext\n                       \"[\" \/ \"]\" \/\n                       \":\" \/ \";\" \/\n                       \"@\" \/ \"\\\" \/\n                       \",\" \/ \".\" \/\n                       DQUOTE\n\n   Both atom and dot-atom are interpreted as a single unit, comprising\n   the string of characters that make it up.  Semantically, the optional\n   comments and FWS surrounding the rest of the characters are not part\n   of the atom; the atom is only the run of atext characters in an atom,\n   or the atext and \".\" characters in a dot-atom.\n\n3.2.4.  Quoted Strings\n\n   Strings of characters that include characters other than those\n   allowed in atoms can be represented in a quoted string format, where\n   the characters are surrounded by quote (DQUOTE, ASCII value 34)\n   characters.\n\n\n\n\n\n\n\n\n\n\n\n\n\nResnick                     Standards Track                    [Page 13]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   qtext           =   %d33 \/             ; Printable US-ASCII\n                       %d35-91 \/          ;  characters not including\n                       %d93-126 \/         ;  \"\\\" or the quote character\n                       obs-qtext\n\n   qcontent        =   qtext \/ quoted-pair\n\n   quoted-string   =   [CFWS]\n                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE\n                       [CFWS]\n\n   A quoted-string is treated as a unit.  That is, quoted-string is\n   identical to atom, semantically.  Since a quoted-string is allowed to\n   contain FWS, folding is permitted.  Also note that since quoted-pair\n   is allowed in a quoted-string, the quote and backslash characters may\n   appear in a quoted-string so long as they appear as a quoted-pair.\n\n   Semantically, neither the optional CFWS outside of the quote\n   characters nor the quote characters themselves are part of the\n   quoted-string; the quoted-string is what is contained between the two\n   quote characters.  As stated earlier, the \"\\\" in any quoted-pair and\n   the CRLF in any FWS\/CFWS that appears within the quoted-string are\n   semantically \"invisible\" and therefore not part of the quoted-string\n   either.\n\n3.2.5.  Miscellaneous Tokens\n\n   Three additional tokens are defined: word and phrase for combinations\n   of atoms and\/or quoted-strings, and unstructured for use in\n   unstructured header fields and in some places within structured\n   header fields.\n\n   word            =   atom \/ quoted-string\n\n   phrase          =   1*word \/ obs-phrase\n\n   unstructured    =   (*([FWS] VCHAR) *WSP) \/ obs-unstruct\n\n3.3.  Date and Time Specification\n\n   Date and time values occur in several header fields.  This section\n   specifies the syntax for a full date and time specification.  Though\n   folding white space is permitted throughout the date-time\n   specification, it is RECOMMENDED that a single space be used in each\n   place that FWS appears (whether it is required or optional); some\n   older implementations will not interpret longer sequences of folding\n   white space correctly.\n\n\n\n\nResnick                     Standards Track                    [Page 14]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   date-time       =   [ day-of-week \",\" ] date time [CFWS]\n\n   day-of-week     =   ([FWS] day-name) \/ obs-day-of-week\n\n   day-name        =   \"Mon\" \/ \"Tue\" \/ \"Wed\" \/ \"Thu\" \/\n                       \"Fri\" \/ \"Sat\" \/ \"Sun\"\n\n   date            =   day month year\n\n   day             =   ([FWS] 1*2DIGIT FWS) \/ obs-day\n\n   month           =   \"Jan\" \/ \"Feb\" \/ \"Mar\" \/ \"Apr\" \/\n                       \"May\" \/ \"Jun\" \/ \"Jul\" \/ \"Aug\" \/\n                       \"Sep\" \/ \"Oct\" \/ \"Nov\" \/ \"Dec\"\n\n   year            =   (FWS 4*DIGIT FWS) \/ obs-year\n\n   time            =   time-of-day zone\n\n   time-of-day     =   hour \":\" minute [ \":\" second ]\n\n   hour            =   2DIGIT \/ obs-hour\n\n   minute          =   2DIGIT \/ obs-minute\n\n   second          =   2DIGIT \/ obs-second\n\n   zone            =   (FWS ( \"+\" \/ \"-\" ) 4DIGIT) \/ obs-zone\n\n   The day is the numeric day of the month.  The year is any numeric\n   year 1900 or later.\n\n   The time-of-day specifies the number of hours, minutes, and\n   optionally seconds since midnight of the date indicated.\n\n   The date and time-of-day SHOULD express local time.\n\n   The zone specifies the offset from Coordinated Universal Time (UTC,\n   formerly referred to as \"Greenwich Mean Time\") that the date and\n   time-of-day represent.  The \"+\" or \"-\" indicates whether the time-of-\n   day is ahead of (i.e., east of) or behind (i.e., west of) Universal\n   Time.  The first two digits indicate the number of hours difference\n   from Universal Time, and the last two digits indicate the number of\n   additional minutes difference from Universal Time.  (Hence, +hhmm\n   means +(hh * 60 + mm) minutes, and -hhmm means -(hh * 60 + mm)\n   minutes).  The form \"+0000\" SHOULD be used to indicate a time zone at\n   Universal Time.  Though \"-0000\" also indicates Universal Time, it is\n\n\n\n\nResnick                     Standards Track                    [Page 15]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   used to indicate that the time was generated on a system that may be\n   in a local time zone other than Universal Time and that the date-time\n   contains no information about the local time zone.\n\n   A date-time specification MUST be semantically valid.  That is, the\n   day-of-week (if included) MUST be the day implied by the date, the\n   numeric day-of-month MUST be between 1 and the number of days allowed\n   for the specified month (in the specified year), the time-of-day MUST\n   be in the range 00:00:00 through 23:59:60 (the number of seconds\n   allowing for a leap second; see [RFC1305]), and the last two digits\n   of the zone MUST be within the range 00 through 59.\n\n3.4.  Address Specification\n\n   Addresses occur in several message header fields to indicate senders\n   and recipients of messages.  An address may either be an individual\n   mailbox, or a group of mailboxes.\n\n   address         =   mailbox \/ group\n\n   mailbox         =   name-addr \/ addr-spec\n\n   name-addr       =   [display-name] angle-addr\n\n   angle-addr      =   [CFWS] \"<\" addr-spec \">\" [CFWS] \/\n                       obs-angle-addr\n\n   group           =   display-name \":\" [group-list] \";\" [CFWS]\n\n   display-name    =   phrase\n\n   mailbox-list    =   (mailbox *(\",\" mailbox)) \/ obs-mbox-list\n\n   address-list    =   (address *(\",\" address)) \/ obs-addr-list\n\n   group-list      =   mailbox-list \/ CFWS \/ obs-group-list\n\n   A mailbox receives mail.  It is a conceptual entity that does not\n   necessarily pertain to file storage.  For example, some sites may\n   choose to print mail on a printer and deliver the output to the\n   addressee's desk.\n\n   Normally, a mailbox is composed of two parts: (1) an optional display\n   name that indicates the name of the recipient (which can be a person\n   or a system) that could be displayed to the user of a mail\n   application, and (2) an addr-spec address enclosed in angle brackets\n\n\n\n\n\nResnick                     Standards Track                    [Page 16]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   (\"<\" and \">\").  There is an alternate simple form of a mailbox where\n   the addr-spec address appears alone, without the recipient's name or\n   the angle brackets.  The Internet addr-spec address is described in\n   section 3.4.1.\n\n      Note: Some legacy implementations used the simple form where the\n      addr-spec appears without the angle brackets, but included the\n      name of the recipient in parentheses as a comment following the\n      addr-spec.  Since the meaning of the information in a comment is\n      unspecified, implementations SHOULD use the full name-addr form of\n      the mailbox, instead of the legacy form, to specify the display\n      name associated with a mailbox.  Also, because some legacy\n      implementations interpret the comment, comments generally SHOULD\n      NOT be used in address fields to avoid confusing such\n      implementations.\n\n   When it is desirable to treat several mailboxes as a single unit\n   (i.e., in a distribution list), the group construct can be used.  The\n   group construct allows the sender to indicate a named group of\n   recipients.  This is done by giving a display name for the group,\n   followed by a colon, followed by a comma-separated list of any number\n   of mailboxes (including zero and one), and ending with a semicolon.\n   Because the list of mailboxes can be empty, using the group construct\n   is also a simple way to communicate to recipients that the message\n   was sent to one or more named sets of recipients, without actually\n   providing the individual mailbox address for any of those recipients.\n\n3.4.1.  Addr-Spec Specification\n\n   An addr-spec is a specific Internet identifier that contains a\n   locally interpreted string followed by the at-sign character (\"@\",\n   ASCII value 64) followed by an Internet domain.  The locally\n   interpreted string is either a quoted-string or a dot-atom.  If the\n   string can be represented as a dot-atom (that is, it contains no\n   characters other than atext characters or \".\" surrounded by atext\n   characters), then the dot-atom form SHOULD be used and the quoted-\n   string form SHOULD NOT be used.  Comments and folding white space\n   SHOULD NOT be used around the \"@\" in the addr-spec.\n\n      Note: A liberal syntax for the domain portion of addr-spec is\n      given here.  However, the domain portion contains addressing\n      information specified by and used in other protocols (e.g.,\n      [RFC1034], [RFC1035], [RFC1123], [RFC5321]).  It is therefore\n      incumbent upon implementations to conform to the syntax of\n      addresses for the context in which they are used.\n\n\n\n\n\n\nResnick                     Standards Track                    [Page 17]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   addr-spec       =   local-part \"@\" domain\n\n   local-part      =   dot-atom \/ quoted-string \/ obs-local-part\n\n   domain          =   dot-atom \/ domain-literal \/ obs-domain\n\n   domain-literal  =   [CFWS] \"[\" *([FWS] dtext) [FWS] \"]\" [CFWS]\n\n   dtext           =   %d33-90 \/          ; Printable US-ASCII\n                       %d94-126 \/         ;  characters not including\n                       obs-dtext          ;  \"[\", \"]\", or \"\\\"\n\n   The domain portion identifies the point to which the mail is\n   delivered.  In the dot-atom form, this is interpreted as an Internet\n   domain name (either a host name or a mail exchanger name) as\n   described in [RFC1034], [RFC1035], and [RFC1123].  In the domain-\n   literal form, the domain is interpreted as the literal Internet\n   address of the particular host.  In both cases, how addressing is\n   used and how messages are transported to a particular host is covered\n   in separate documents, such as [RFC5321].  These mechanisms are\n   outside of the scope of this document.\n\n   The local-part portion is a domain-dependent string.  In addresses,\n   it is simply interpreted on the particular host as a name of a\n   particular mailbox.\n\n3.5.  Overall Message Syntax\n\n   A message consists of header fields, optionally followed by a message\n   body.  Lines in a message MUST be a maximum of 998 characters\n   excluding the CRLF, but it is RECOMMENDED that lines be limited to 78\n   characters excluding the CRLF.  (See section 2.1.1 for explanation.)\n   In a message body, though all of the characters listed in the text\n   rule MAY be used, the use of US-ASCII control characters (values 1\n   through 8, 11, 12, and 14 through 31) is discouraged since their\n   interpretation by receivers for display is not guaranteed.\n\n   message         =   (fields \/ obs-fields)\n                       [CRLF body]\n\n   body            =   (*(*998text CRLF) *998text) \/ obs-body\n\n   text            =   %d1-9 \/            ; Characters excluding CR\n                       %d11 \/             ;  and LF\n                       %d12 \/\n                       %d14-127\n\n\n\n\n\nResnick                     Standards Track                    [Page 18]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   The header fields carry most of the semantic information and are\n   defined in section 3.6.  The body is simply a series of lines of text\n   that are uninterpreted for the purposes of this specification.\n\n3.6.  Field Definitions\n\n   The header fields of a message are defined here.  All header fields\n   have the same general syntactic structure: a field name, followed by\n   a colon, followed by the field body.  The specific syntax for each\n   header field is defined in the subsequent sections.\n\n      Note: In the ABNF syntax for each field in subsequent sections,\n      each field name is followed by the required colon.  However, for\n      brevity, sometimes the colon is not referred to in the textual\n      description of the syntax.  It is, nonetheless, required.\n\n   It is important to note that the header fields are not guaranteed to\n   be in a particular order.  They may appear in any order, and they\n   have been known to be reordered occasionally when transported over\n   the Internet.  However, for the purposes of this specification,\n   header fields SHOULD NOT be reordered when a message is transported\n   or transformed.  More importantly, the trace header fields and resent\n   header fields MUST NOT be reordered, and SHOULD be kept in blocks\n   prepended to the message.  See sections 3.6.6 and 3.6.7 for more\n   information.\n\n   The only required header fields are the origination date field and\n   the originator address field(s).  All other header fields are\n   syntactically optional.  More information is contained in the table\n   following this definition.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResnick                     Standards Track                    [Page 19]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   fields          =   *(trace\n                         *optional-field \/\n                         *(resent-date \/\n                          resent-from \/\n                          resent-sender \/\n                          resent-to \/\n                          resent-cc \/\n                          resent-bcc \/\n                          resent-msg-id))\n                       *(orig-date \/\n                       from \/\n                       sender \/\n                       reply-to \/\n                       to \/\n                       cc \/\n                       bcc \/\n                       message-id \/\n                       in-reply-to \/\n                       references \/\n                       subject \/\n                       comments \/\n                       keywords \/\n                       optional-field)\n\n   The following table indicates limits on the number of times each\n   field may occur in the header section of a message as well as any\n   special limitations on the use of those fields.  An asterisk (\"*\")\n   next to a value in the minimum or maximum column indicates that a\n   special restriction appears in the Notes column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResnick                     Standards Track                    [Page 20]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   +----------------+--------+------------+----------------------------+\n   | Field          | Min    | Max number | Notes                      |\n   |                | number |            |                            |\n   +----------------+--------+------------+----------------------------+\n   | trace          | 0      | unlimited  | Block prepended - see      |\n   |                |        |            | 3.6.7                      |\n   | resent-date    | 0*     | unlimited* | One per block, required if |\n   |                |        |            | other resent fields are    |\n   |                |        |            | present - see 3.6.6        |\n   | resent-from    | 0      | unlimited* | One per block - see 3.6.6  |\n   | resent-sender  | 0*     | unlimited* | One per block, MUST occur  |\n   |                |        |            | with multi-address         |\n   |                |        |            | resent-from - see 3.6.6    |\n   | resent-to      | 0      | unlimited* | One per block - see 3.6.6  |\n   | resent-cc      | 0      | unlimited* | One per block - see 3.6.6  |\n   | resent-bcc     | 0      | unlimited* | One per block - see 3.6.6  |\n   | resent-msg-id  | 0      | unlimited* | One per block - see 3.6.6  |\n   | orig-date      | 1      | 1          |                            |\n   | from           | 1      | 1          | See sender and 3.6.2       |\n   | sender         | 0*     | 1          | MUST occur with            |\n   |                |        |            | multi-address from - see   |\n   |                |        |            | 3.6.2                      |\n   | reply-to       | 0      | 1          |                            |\n   | to             | 0      | 1          |                            |\n   | cc             | 0      | 1          |                            |\n   | bcc            | 0      | 1          |                            |\n   | message-id     | 0*     | 1          | SHOULD be present - see    |\n   |                |        |            | 3.6.4                      |\n   | in-reply-to    | 0*     | 1          | SHOULD occur in some       |\n   |                |        |            | replies - see 3.6.4        |\n   | references     | 0*     | 1          | SHOULD occur in some       |\n   |                |        |            | replies - see 3.6.4        |\n   | subject        | 0      | 1          |                            |\n   | comments       | 0      | unlimited  |                            |\n   | keywords       | 0      | unlimited  |                            |\n   | optional-field | 0      | unlimited  |                            |\n   +----------------+--------+------------+----------------------------+\n\n   The exact interpretation of each field is described in subsequent\n   sections.\n\n\n\n\n\n\n\n\n\n\n\nResnick                     Standards Track                    [Page 21]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n3.6.1.  The Origination Date Field\n\n   The origination date field consists of the field name \"Date\" followed\n   by a date-time specification.\n\n   orig-date       =   \"Date:\" date-time CRLF\n\n   The origination date specifies the date and time at which the creator\n   of the message indicated that the message was complete and ready to\n   enter the mail delivery system.  For instance, this might be the time\n   that a user pushes the \"send\" or \"submit\" button in an application\n   program.  In any case, it is specifically not intended to convey the\n   time that the message is actually transported, but rather the time at\n   which the human or other creator of the message has put the message\n   into its final form, ready for transport.  (For example, a portable\n   computer user who is not connected to a network might queue a message\n   for delivery.  The origination date is intended to contain the date\n   and time that the user queued the message, not the time when the user\n   connected to the network to send the message.)\n\n3.6.2.  Originator Fields\n\n   The originator fields of a message consist of the from field, the\n   sender field (when applicable), and optionally the reply-to field.\n   The from field consists of the field name \"From\" and a comma-\n   separated list of one or more mailbox specifications.  If the from\n   field contains more than one mailbox specification in the mailbox-\n   list, then the sender field, containing the field name \"Sender\" and a\n   single mailbox specification, MUST appear in the message.  In either\n   case, an optional reply-to field MAY also be included, which contains\n   the field name \"Reply-To\" and a comma-separated list of one or more\n   addresses.\n\n   from            =   \"From:\" mailbox-list CRLF\n\n   sender          =   \"Sender:\" mailbox CRLF\n\n   reply-to        =   \"Reply-To:\" address-list CRLF\n\n   The originator fields indicate the mailbox(es) of the source of the\n   message.  The \"From:\" field specifies the author(s) of the message,\n   that is, the mailbox(es) of the person(s) or system(s) responsible\n   for the writing of the message.  The \"Sender:\" field specifies the\n   mailbox of the agent responsible for the actual transmission of the\n   message.  For example, if a secretary were to send a message for\n   another person, the mailbox of the secretary would appear in the\n   \"Sender:\" field and the mailbox of the actual author would appear in\n   the \"From:\" field.  If the originator of the message can be indicated\n\n\n\nResnick                     Standards Track                    [Page 22]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   by a single mailbox and the author and transmitter are identical, the\n   \"Sender:\" field SHOULD NOT be used.  Otherwise, both fields SHOULD\n   appear.\n\n      Note: The transmitter information is always present.  The absence\n      of the \"Sender:\" field is sometimes mistakenly taken to mean that\n      the agent responsible for transmission of the message has not been\n      specified.  This absence merely means that the transmitter is\n      identical to the author and is therefore not redundantly placed\n      into the \"Sender:\" field.\n\n   The originator fields also provide the information required when\n   replying to a message.  When the \"Reply-To:\" field is present, it\n   indicates the address(es) to which the author of the message suggests\n   that replies be sent.  In the absence of the \"Reply-To:\" field,\n   replies SHOULD by default be sent to the mailbox(es) specified in the\n   \"From:\" field unless otherwise specified by the person composing the\n   reply.\n\n   In all cases, the \"From:\" field SHOULD NOT contain any mailbox that\n   does not belong to the author(s) of the message.  See also section\n   3.6.3 for more information on forming the destination addresses for a\n   reply.\n\n3.6.3.  Destination Address Fields\n\n   The destination fields of a message consist of three possible fields,\n   each of the same form: the field name, which is either \"To\", \"Cc\", or\n   \"Bcc\", followed by a comma-separated list of one or more addresses\n   (either mailbox or group syntax).\n\n   to              =   \"To:\" address-list CRLF\n\n   cc              =   \"Cc:\" address-list CRLF\n\n   bcc             =   \"Bcc:\" [address-list \/ CFWS] CRLF\n\n   The destination fields specify the recipients of the message.  Each\n   destination field may have one or more addresses, and the addresses\n   indicate the intended recipients of the message.  The only difference\n   between the three fields is how each is used.\n\n   The \"To:\" field contains the address(es) of the primary recipient(s)\n   of the message.\n\n\n\n\n\n\n\nResnick                     Standards Track                    [Page 23]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   The \"Cc:\" field (where the \"Cc\" means \"Carbon Copy\" in the sense of\n   making a copy on a typewriter using carbon paper) contains the\n   addresses of others who are to receive the message, though the\n   content of the message may not be directed at them.\n\n   The \"Bcc:\" field (where the \"Bcc\" means \"Blind Carbon Copy\") contains\n   addresses of recipients of the message whose addresses are not to be\n   revealed to other recipients of the message.  There are three ways in\n   which the \"Bcc:\" field is used.  In the first case, when a message\n   containing a \"Bcc:\" field is prepared to be sent, the \"Bcc:\" line is\n   removed even though all of the recipients (including those specified\n   in the \"Bcc:\" field) are sent a copy of the message.  In the second\n   case, recipients specified in the \"To:\" and \"Cc:\" lines each are sent\n   a copy of the message with the \"Bcc:\" line removed as above, but the\n   recipients on the \"Bcc:\" line get a separate copy of the message\n   containing a \"Bcc:\" line.  (When there are multiple recipient\n   addresses in the \"Bcc:\" field, some implementations actually send a\n   separate copy of the message to each recipient with a \"Bcc:\"\n   containing only the address of that particular recipient.)  Finally,\n   since a \"Bcc:\" field may contain no addresses, a \"Bcc:\" field can be\n   sent without any addresses indicating to the recipients that blind\n   copies were sent to someone.  Which method to use with \"Bcc:\" fields\n   is implementation dependent, but refer to the \"Security\n   Considerations\" section of this document for a discussion of each.\n\n   When a message is a reply to another message, the mailboxes of the\n   authors of the original message (the mailboxes in the \"From:\" field)\n   or mailboxes specified in the \"Reply-To:\" field (if it exists) MAY\n   appear in the \"To:\" field of the reply since these would normally be\n   the primary recipients of the reply.  If a reply is sent to a message\n   that has destination fields, it is often desirable to send a copy of\n   the reply to all of the recipients of the message, in addition to the\n   author.  When such a reply is formed, addresses in the \"To:\" and\n   \"Cc:\" fields of the original message MAY appear in the \"Cc:\" field of\n   the reply, since these are normally secondary recipients of the\n   reply.  If a \"Bcc:\" field is present in the original message,\n   addresses in that field MAY appear in the \"Bcc:\" field of the reply,\n   but they SHOULD NOT appear in the \"To:\" or \"Cc:\" fields.\n\n      Note: Some mail applications have automatic reply commands that\n      include the destination addresses of the original message in the\n      destination addresses of the reply.  How those reply commands\n      behave is implementation dependent and is beyond the scope of this\n      document.  In particular, whether or not to include the original\n      destination addresses when the original message had a \"Reply-To:\"\n      field is not addressed here.\n\n\n\n\n\nResnick                     Standards Track                    [Page 24]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n3.6.4.  Identification Fields\n\n   Though listed as optional in the table in section 3.6, every message\n   SHOULD have a \"Message-ID:\" field.  Furthermore, reply messages\n   SHOULD have \"In-Reply-To:\" and \"References:\" fields as appropriate\n   and as described below.\n\n   The \"Message-ID:\" field contains a single unique message identifier.\n   The \"References:\" and \"In-Reply-To:\" fields each contain one or more\n   unique message identifiers, optionally separated by CFWS.\n\n   The message identifier (msg-id) syntax is a limited version of the\n   addr-spec construct enclosed in the angle bracket characters, \"<\" and\n   \">\".  Unlike addr-spec, this syntax only permits the dot-atom-text\n   form on the left-hand side of the \"@\" and does not have internal CFWS\n   anywhere in the message identifier.\n\n      Note: As with addr-spec, a liberal syntax is given for the right-\n      hand side of the \"@\" in a msg-id.  However, later in this section,\n      the use of a domain for the right-hand side of the \"@\" is\n      RECOMMENDED.  Again, the syntax of domain constructs is specified\n      by and used in other protocols (e.g., [RFC1034], [RFC1035],\n      [RFC1123], [RFC5321]).  It is therefore incumbent upon\n      implementations to conform to the syntax of addresses for the\n      context in which they are used.\n\n   message-id      =   \"Message-ID:\" msg-id CRLF\n\n   in-reply-to     =   \"In-Reply-To:\" 1*msg-id CRLF\n\n   references      =   \"References:\" 1*msg-id CRLF\n\n   msg-id          =   [CFWS] \"<\" id-left \"@\" id-right \">\" [CFWS]\n\n   id-left         =   dot-atom-text \/ obs-id-left\n\n   id-right        =   dot-atom-text \/ no-fold-literal \/ obs-id-right\n\n   no-fold-literal =   \"[\" *dtext \"]\"\n\n   The \"Message-ID:\" field provides a unique message identifier that\n   refers to a particular version of a particular message.  The\n   uniqueness of the message identifier is guaranteed by the host that\n   generates it (see below).  This message identifier is intended to be\n   machine readable and not necessarily meaningful to humans.  A message\n   identifier pertains to exactly one version of a particular message;\n   subsequent revisions to the message each receive new message\n   identifiers.\n\n\n\nResnick                     Standards Track                    [Page 25]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n      Note: There are many instances when messages are \"changed\", but\n      those changes do not constitute a new instantiation of that\n      message, and therefore the message would not get a new message\n      identifier.  For example, when messages are introduced into the\n      transport system, they are often prepended with additional header\n      fields such as trace fields (described in section 3.6.7) and\n      resent fields (described in section 3.6.6).  The addition of such\n      header fields does not change the identity of the message and\n      therefore the original \"Message-ID:\" field is retained.  In all\n      cases, it is the meaning that the sender of the message wishes to\n      convey (i.e., whether this is the same message or a different\n      message) that determines whether or not the \"Message-ID:\" field\n      changes, not any particular syntactic difference that appears (or\n      does not appear) in the message.\n\n   The \"In-Reply-To:\" and \"References:\" fields are used when creating a\n   reply to a message.  They hold the message identifier of the original\n   message and the message identifiers of other messages (for example,\n   in the case of a reply to a message that was itself a reply).  The\n   \"In-Reply-To:\" field may be used to identify the message (or\n   messages) to which the new message is a reply, while the\n   \"References:\" field may be used to identify a \"thread\" of\n   conversation.\n\n   When creating a reply to a message, the \"In-Reply-To:\" and\n   \"References:\" fields of the resultant message are constructed as\n   follows:\n\n   The \"In-Reply-To:\" field will contain the contents of the\n   \"Message-ID:\" field of the message to which this one is a reply (the\n   \"parent message\").  If there is more than one parent message, then\n   the \"In-Reply-To:\" field will contain the contents of all of the\n   parents' \"Message-ID:\" fields.  If there is no \"Message-ID:\" field in\n   any of the parent messages, then the new message will have no \"In-\n   Reply-To:\" field.\n\n   The \"References:\" field will contain the contents of the parent's\n   \"References:\" field (if any) followed by the contents of the parent's\n   \"Message-ID:\" field (if any).  If the parent message does not contain\n   a \"References:\" field but does have an \"In-Reply-To:\" field\n   containing a single message identifier, then the \"References:\" field\n   will contain the contents of the parent's \"In-Reply-To:\" field\n   followed by the contents of the parent's \"Message-ID:\" field (if\n   any).  If the parent has none of the \"References:\", \"In-Reply-To:\",\n   or \"Message-ID:\" fields, then the new message will have no\n   \"References:\" field.\n\n\n\n\n\nResnick                     Standards Track                    [Page 26]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n      Note: Some implementations parse the \"References:\" field to\n      display the \"thread of the discussion\".  These implementations\n      assume that each new message is a reply to a single parent and\n      hence that they can walk backwards through the \"References:\" field\n      to find the parent of each message listed there.  Therefore,\n      trying to form a \"References:\" field for a reply that has multiple\n      parents is discouraged; how to do so is not defined in this\n      document.\n\n   The message identifier (msg-id) itself MUST be a globally unique\n   identifier for a message.  The generator of the message identifier\n   MUST guarantee that the msg-id is unique.  There are several\n   algorithms that can be used to accomplish this.  Since the msg-id has\n   a similar syntax to addr-spec (identical except that quoted strings,\n   comments, and folding white space are not allowed), a good method is\n   to put the domain name (or a domain literal IP address) of the host\n   on which the message identifier was created on the right-hand side of\n   the \"@\" (since domain names and IP addresses are normally unique),\n   and put a combination of the current absolute date and time along\n   with some other currently unique (perhaps sequential) identifier\n   available on the system (for example, a process id number) on the\n   left-hand side.  Though other algorithms will work, it is RECOMMENDED\n   that the right-hand side contain some domain identifier (either of\n   the host itself or otherwise) such that the generator of the message\n   identifier can guarantee the uniqueness of the left-hand side within\n   the scope of that domain.\n\n   Semantically, the angle bracket characters are not part of the\n   msg-id; the msg-id is what is contained between the two angle bracket\n   characters.\n\n3.6.5.  Informational Fields\n\n   The informational fields are all optional.  The \"Subject:\" and\n   \"Comments:\" fields are unstructured fields as defined in section\n   2.2.1, and therefore may contain text or folding white space.  The\n   \"Keywords:\" field contains a comma-separated list of one or more\n   words or quoted-strings.\n\n   subject         =   \"Subject:\" unstructured CRLF\n\n   comments        =   \"Comments:\" unstructured CRLF\n\n   keywords        =   \"Keywords:\" phrase *(\",\" phrase) CRLF\n\n   These three fields are intended to have only human-readable content\n   with information about the message.  The \"Subject:\" field is the most\n   common and contains a short string identifying the topic of the\n\n\n\nResnick                     Standards Track                    [Page 27]\n\f\nRFC 5322                Internet Message Format             October 2008\n\n\n   message.  When used in a reply, the field body MAY start with the\n   string \"Re: \" (an abbreviation of the Latin \"in re\", meaning \"in the\n   matter of\") followed by the contents of the \"Subject:\" field body of\n   the original message.  If this is done, only one instance of the\n   literal string \"Re: \" ought to be used since use of other strings or\n   more than one instance can lead to undesirable consequences.  The\n   \"Comments:\" field contains any additional comments on the text of the\n   body of the message.  The \"Keywords:\" field contains a comma-\n   separated list of important words and phrases that might be useful\n   for the recipient.\n\n3.6.6.  Resent Fields\n\n   Resent fields SHOULD be added to any message that is reintroduced by\n   a user into the transport system.  A separate set of resent fields\n   SHOULD be added each time this is done.  All of the resent fields\n   corresponding to a particular resending of the message SHOULD be\n   grouped together.  Each new set of resent fields is prepended to the\n   message; that is, the most recent set of resent fields appears\n   earlier in the message.  No other fields in the message are changed\n   when resent fields are added.\n\n   Each of the resent fields corresponds to a particular field elsewhere\n   in the syntax.  For instance, the \"Resent-Da","weightedVote":"2.5","numVotes":"0","author":"","community":"1","dateAdded":"2015-09-15","pattern":"\/([-]|[\\.]|[\\w])+[@]+[\\w]+[\\.]([a-z]){2}\/g","replace":"","state":"{\"substEnabled\":false}"}