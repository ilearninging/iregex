{"id":"144814","urlID":"38pua","name":"naming convention v1","description":"finished method with improvements. regex should now do everything the included method claims it does.","content":"2012.11.09_mary.a_san.luis.obispo_w\n\n    \/**\n     * test name of uploaded file for standardized naming convention\n     * acceptable names are lowercase alphanumeric\n     * the names are delimted with an underscore (_) to create 4 data groups:\n     * date, name, city, gender\n     * the date, name and city groups are optionally delimited with a dot (.)\n     * to create sub-groups as explained for each group below\n     * \n     * @return boolean\n     *\/\n    private function check_name(){\n        \/**\n         * allowed date formats (year is required):\n         * \n         * 1. year only (yyyy) only years from 2000-2029 will work\n         *      2014_\n         * 2. year and month (yyyy.mm)\n         *      2014.05_\n         * 3. year, month and day (yyyy.mm.dd)\n         *      2014.05.04_\n         *\/\n        $regex  = '\/^20([0-2][0-9])(\\.(0[1-9]|1[012])(\\.(0[1-9]|1[0-9]|2[0-9]|3[01]))?)?_';\n        \/**\n         * allowed speaker name formats (lowercase only):\n         * \n         * 1. first name only (required):\n         *  may be 1-24 characters long\n         *  may include ONE hyphen (-)\n         *  if hyphenated, maximum character length increases to 41\n         *      2014.05.04_m_\n         *      2014.05.04_mary-ann_\n         *      2014.05.04_marianne_\n         * 2. first name and last initial (preferred):\n         *  last initial is limited to ONE character\n         *      2014.05.04_m.k_\n         *      2014.05.04_mary-ann.k_\n         *      2014.05.04_marianne.k_\n         * 3. first name, middle name and last initial\n         *  middle name may be 1-16 characters\n         *  no hyphens allowed in middle name\n         *  last initial is limited to ONE character\n         *      2014.05.04_m.ann.k_\n         *      2014.05.04_mary.ann.k_\n         *      2014.05.04_mary-ann.ursula.k_\n         *\/\n        $regex .= '([a-z]{1,24}((\\-)?[a-z]{1,16})?)((\\.[a-z]{1})|(\\.[a-z]{1,16}\\.[a-z]{1}))?_';\n        \/**\n         * allowed city formats (lowercase only):\n         * \n         * 1. city name is optional and may be left blank, but the underscore\n         *  delimiter must be included\n         *      2014.05.04_mary.ann.k__\n         * 2. city name may be 1-24 characters\n         *  may include ONE hyphen (-)\n         *  if hyphenated, maximum character length increases to 41\n         *      2014.05.04_m.ann.k_orange_\n         *      2014.05.04_mary.ann.k_winston-salem_\n         * 3. multiple-word city names\n         *  there may be up to three additional words\n         *  additional words may be 1-16 characters long\n         *  additional words may not contain hyphens\n         *      2014.05.04_m.k_san.clemente_\n         *      2014.05.04_mary-ann.k_san.juan.capistrano_\n         *\/\n        $regex .= '(([a-z]{1,24}((\\-)?[a-z]{1,16})?)(\\.[a-z]{1,16}(\\.[a-z]{1,16}(\\.[a-z]{1,16})?)?)?)?_';\n        \/**\n         * allowed gender formats:\n         * \n         * 1. one lowercase character (required)\n         *  m for men\n         *  w for women\n         *      2014.05.04_mary-ann.k_san.juan.capistrano_w\n         *  anything else, or omitting it, will fail\n         *\/\n        $regex .= '(m|w)$\/';\n        if( preg_match( $regex, $this->name ) != 1 ){ return $this->get_err( 'structure' ); }\n        \/\/ well-formed filename, but is the date for real?\n        $groups = explode( '_', $this->name );\n        $date = $gro","weightedVote":"2.5","numVotes":"0","author":"Darren Cassidy","community":"1","dateAdded":"2014-05-05","pattern":"\/^20([0-2][0-9])(\\.(0[1-9]|1[012])(\\.(0[1-9]|1[0-9]|2[0-9]|3[01]))?)?_([a-z]{1,24}((\\-)?[a-z]{1,16})?)((\\.[a-z]{1})|(\\.[a-z]{1,16}\\.[a-z]{1}))?_(([a-z]{1,24}((\\-)?[a-z]{1,16})?)(\\.[a-z]{1,16}(\\.[a-z]{1,16}(\\.[a-z]{1,16})?)?)?)?_(m|w)$\/m","replace":"","state":""}