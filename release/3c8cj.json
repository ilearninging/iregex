{"id":"182513","urlID":"3c8cj","name":"asdsa","description":"dasd","content":"namespace Videos.Tests.UnitTests\n{\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Net;\n    using System.Net.Http;\n    using System.Threading;\n    using System.Web.Http;\n    using Data.UnitOfWork;\n    using Microsoft.VisualStudio.TestTools.UnitTesting;\n    using Rest.Controllers;\n    using Rest.Models.BindingModels;\n\n    [TestClass]\n    public class VideoControllerTest\n    {\n        private MockContainer mocks;\n\n        [TestInitialize]\n        public void InitTest()\n        {\n            this.mocks = new MockContainer();\n            this.mocks.SetupMocks();\n        }\n\n        [TestMethod]\n        public void GetVideos_ShouldReturnAllFromLocation_WhenLocationIdIsValid()\n        {\n            \/\/ Arrange\n            var fakeData = this.mocks.MockData.Object;\n            var existingLocationId = this.mocks.LocationMock.Object.All()\n                .First().Id;\n\n            \/\/ Act\n            var response = this.SendGetVideoRequest(existingLocationId, fakeData);\n\n            \/\/ Assert\n            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);\n\n            var videoCount = this.mocks.VideoMock.Object\n                .All()\n                .Count(r => r.LocationId == existingLocationId);\n\n            var videos = response.Content\n                .ReadAsAsync<IEnumerable<VideoBidingModel>>().Result;\n            Assert.AreEqual(videoCount, videos.Count());\n\n            foreach (var video in videos)\n            {\n                Assert.IsNotNull(video.Title);\n                Assert.IsNotNull(video.LocationId);\n                Assert.AreEqual(existingLocationId, video.LocationId);\n            }\n        }\n\n        [TestMethod]\n        public void GetVideos_ShouldReturnEmpty_WhenLocationIdIsInvalid()\n        {\n            \/\/ Arrange\n            var fakeData = this.mocks.MockData.Object;\n            var invalidId = -1;\n\n            \/\/ Act\n            var response = this.SendGetVideoRequest(invalidId, fakeData);\n\n            \/\/ Assert\n            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);\n\n            var restaurants = response.Content\n                .ReadAsAsync<IEnumerable<VideoBidingModel>>().Result;\n            Assert.AreEqual(0, restaurants.Count());\n        }\n\n        private HttpResponseMessage SendGetVideoRequest(int locationId, IVideosData data)\n        {\n            var model = new GetAllVideosByLocation{ LocationId = locationId };\n\n            var controller = new VideosController(data);\n            this.SetupController(controller);\n\n            var response = controller.GetAllVideos(model)\n                .ExecuteAsync(CancellationToken.None).Result;\n            return response;\n        }\n\n        private void SetupController(ApiController controller)\n        {\n            controller.Configuration = new HttpConfiguration();\n            controller.Request = new HttpRequestMessage();\n        }\n    }\n}\n\n","weightedVote":"2.5","numVotes":"0","author":"asda","community":"1","dateAdded":"2015-11-19","pattern":"\/([A-Z])\\w+\/g","replace":"","state":"{\"substEnabled\":false}"}